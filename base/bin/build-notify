#!/usr/bin/env bash

# Build status notifications
# Can post updates via builds status API (Github and Bitbucket) and/or pull request comments

#-------------------------- SETTINGS ----------------------------

DEBUG=${DEBUG:-0}  # `DEBUG=1 build-notify` to run with debugging turned ON

export CONTEXT="ci/docksal"  # Context for notifications
export URL="https://${SANDBOX_DOMAIN}"  # Sandbox URL
export STATUS_API=${STATUS_API:-1}  # Status API notifications enabled by default
export PR_COMMENT=${PR_COMMENT:-0}  # PR comment notifications disabled by default

#-------------------------- FUNCTIONS ----------------------------

# Calls Github status API (commit/branch level status updates)
# API docs: https://developer.github.com/v3/repos/statuses/
#
# @param $1 context - unique key for this status (e.g. sandbox, artifacts)
# @param $2 state - error, failure, pending, or success
# @param $3 description - description of the status update
# @param $4 url - status link URL
#
# Example: github_status_api "sandbox" "pending" "Started building sandbox environment" "http://${SANDBOX_DOMAIN}"
#
github_status_api ()
{
	[[ "${GIT_REPO_SERVICE}" != "github" ]] && return
	[[ "${GITHUB_TOKEN}" == "" ]] && echo "Set GITHUB_TOKEN to enable build status notifications" && return

	local context="$1"
	local state="$2"
	local description="$3"
	local url="$4"

	echo "Notifying Github Status API: ${context} => ${state}"

	PAYLOAD="{\"state\": \"${state}\",\"target_url\": \"${url}\",\"description\": \"${description}\",\"context\": \"${context}\"}"
	API_URL="https://api.github.com/repos/${GIT_REPO_OWNER}/${GIT_REPO_NAME}/statuses/${GIT_COMMIT_HASH}"

	output=$(curl -sS --request POST "${API_URL}" \
		--header "Content-Type: application/json" \
		--header "Accept: application/vnd.github.v3.full+json" \
		--header "Authorization: token ${GITHUB_TOKEN}" \
		--data "${PAYLOAD}")

	# Print curl output in debug mode
	if [[ "$DEBUG" != 0 ]]; then echo "$output"; fi
}

# Calls Bitbucket Pipelines status API (commit/branch level status updates)
# API docs: https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses/build
#
# @param $1 context - unique key for this status (e.g. sandbox, artifacts)
# @param $2 state - SUCCESSFUL, FAILED, INPROGRESS, STOPPED
# @param $3 description - description of the status update
# @param $4 url - status link URL
#
# Example: bitbucket_status_api "sandbox" "INPROGRESS" "Sandbox environment" "http://${SANDBOX_DOMAIN}"
#
bitbucket_status_api ()
{
	[[ "${GIT_REPO_SERVICE}" != "bitbucket" ]] && return
	[[ "${BITBUCKET_TOKEN}" == "" ]] && echo "Set BITBUCKET_TOKEN to enable build status notifications" && return

	local context="$1"
	local state="$2"
	local description="$3"
	local url="$4"

	echo "Notifying Bitbucket Status API: ${context} => ${state}"

	PAYLOAD="{\"key\": \"${context}\", \"name\": \"${context}\", \"state\": \"${state}\", \"description\": \"${description}\", \"url\": \"${url}\"}"
	API_URL="https://api.bitbucket.org/2.0/repositories/${GIT_REPO_OWNER}/${GIT_REPO_NAME}/commit/${GIT_COMMIT_HASH}/statuses/build"

	output=$(curl -sS --request POST "${API_URL}" \
		--header "Content-Type: application/json" \
		--user "${BITBUCKET_TOKEN}" \
		--data "${PAYLOAD}")

	# Print curl output in debug mode
	if [[ "$DEBUG" != 0 ]]; then echo "$output"; fi
}

# Posts a comment to a pull request in Github
# @param $1 - comment
github_pr_comment ()
{
	[[ "${GIT_REPO_SERVICE}" != "github" ]] && return
	[[ "${GIT_PR_NUMBER}" == "" ]] && return
	[[ "${GITHUB_TOKEN}" == "" ]] && echo "Set GITHUB_TOKEN to enable build status notifications" && return

	local comment="$1"

	echo "Posting sandbox URL to Github pull request..."
	PAYLOAD="{\"body\": \"${comment}\"}"
	API_URL="https://api.github.com/repos/${GIT_REPO_OWNER}/${GIT_REPO_NAME}/issues/${GIT_PR_NUMBER}/comments"

	output=$(curl -sS --request POST "${API_URL}" \
		--header "Content-Type: application/json" \
		--header "Accept: application/vnd.github.v3.full+json" \
		--header "Authorization: token ${GITHUB_TOKEN}" \
		--data "${PAYLOAD}")

	# Print curl output in debug mode
	if [[ "$DEBUG" != 0 ]]; then echo "$output"; fi
}

# Posts a comment to a pull request in Bitbucket
# @param $1 - comment
bitbucket_pr_comment ()
{
	[[ "${GIT_REPO_SERVICE}" != "bitbucket" ]] && return
	[[ "${GIT_PR_NUMBER}" == "" ]] && return
	[[ "${BITBUCKET_TOKEN}" == "" ]] && echo "Set BITBUCKET_TOKEN to enable build status notifications" && return

	local comment="$1"

	echo "Posting sandbox URL to Bitbucket pull request..."
	PAYLOAD="content=${comment}"
	# Posting comments to PRs is only available in BB API 1.0
	API_URL="https://api.bitbucket.org/1.0/repositories/${GIT_REPO_OWNER}/${GIT_REPO_NAME}/pullrequests/${GIT_PR_NUMBER}/comments"

	output=$(curl -sS --request POST "${API_URL}" \
		--user "${BITBUCKET_TOKEN}" \
		--data "${PAYLOAD}")

	# Print curl output in debug mode
	if [[ "$DEBUG" != 0 ]]; then echo "$output"; fi
}

notify_pending ()
{
	description="Started building sandbox environment"

	[[ "$GIT_REPO_SERVICE" == "bitbucket" ]] && bitbucket_status_api "$CONTEXT" "INPROGRESS" "$description" "$URL"
	[[ "$GIT_REPO_SERVICE" == "github" ]] && github_status_api "$CONTEXT" "pending" "$description" "$URL"

	return 0
}

notify_success ()
{
	description="Sandbox environment build completed"

	[[ "$GIT_REPO_SERVICE" == "bitbucket" ]] && bitbucket_status_api "$CONTEXT" "SUCCESSFUL" "$description" "$URL"
	[[ "$GIT_REPO_SERVICE" == "github" ]] && github_status_api "$CONTEXT" "success" "$description" "$URL"

	# Post comment to a pull request on success only
	# Note: pull request builds are not supported by Bitbucket Pipelines
	if [[ "$CIRCLECI" != "" ]] && [[ "$PR_COMMENT" != 0 ]]; then
		comment="$description: ${URL}"
		[[ "${GIT_REPO_SERVICE}" == "github" ]] && github_pr_comment "$comment"
		[[ "${GIT_REPO_SERVICE}" == "bitbucket" ]] && bitbucket_pr_comment "$comment"
	fi

	return 0
}

notify_failure ()
{
	description="Sandbox environment build failed"

	[[ "$GIT_REPO_SERVICE" == "bitbucket" ]] && bitbucket_status_api "$CONTEXT" "FAILED" "$description" "$URL"
	[[ "$GIT_REPO_SERVICE" == "github" ]] && github_status_api "$CONTEXT" "failure" "$description" "$URL"

	return 0
}

#-------------------------- RUNTIME STARTS HERE ----------------------------

# Post build state via status API
case "$1" in
	pending)
		notify_pending
		;;
	success)
		notify_success
		;;
	failure)
		notify_failure
		;;
	*)
		echo "Usage: build-notify <pending|success|failure>"
		;;
esac
